name: Deploy Flutter Web (S3 + CloudFront, no hardcoded IDs)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to deploy (e.g., prod or staging)"
        required: false
        default: "prod"

env:
  # Pipeline target environment (prod/staging/etc.)
  ENV: ${{ inputs.env || 'prod' }}

  # Read-only repo variables you set in GitHub > Settings > Variables
  # Nothing sensitive in the repo!
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}           # e.g. arn:aws:iam::<ACCOUNT_ID>:role/github-oidc-deploy
  BOOTSTRAP_REGION: ${{ vars.BOOTSTRAP_REGION }}   # region where you store SSM params (e.g. us-east-1)
  SSM_PREFIX: ${{ vars.SSM_PREFIX }}               # e.g. /myapp

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # OIDC for AWS
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Build Flutter web
        run: |
          flutter config --enable-web
          flutter pub get
          # Choose renderer; canvaskit looks best for many apps
          flutter build web --release --web-renderer canvaskit --base-href /

      # First auth just to read SSM in a known region (no hardcoding; you set BOOTSTRAP_REGION as a repo variable)
      - name: Configure AWS credentials (bootstrap for SSM)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.BOOTSTRAP_REGION }}

      - name: Read deploy params from SSM (no hardcoded IDs)
        id: params
        shell: bash
        run: |
          set -euo pipefail
          # Expected SSM params:
          #   $SSM_PREFIX/$ENV/s3_bucket
          #   $SSM_PREFIX/$ENV/cf_distribution_id
          #   $SSM_PREFIX/$ENV/aws_region
          S3_BUCKET=$(aws ssm get-parameter --name "${SSM_PREFIX}/${ENV}/s3_bucket" --with-decryption --query Parameter.Value --output text)
          CF_DISTRIBUTION_ID=$(aws ssm get-parameter --name "${SSM_PREFIX}/${ENV}/cf_distribution_id" --with-decryption --query Parameter.Value --output text)
          AWS_REGION=$(aws ssm get-parameter --name "${SSM_PREFIX}/${ENV}/aws_region" --with-decryption --query Parameter.Value --output text)

          echo "S3_BUCKET=$S3_BUCKET" | tee -a "$GITHUB_ENV"
          echo "CF_DISTRIBUTION_ID=$CF_DISTRIBUTION_ID" | tee -a "$GITHUB_ENV"
          echo "AWS_REGION=$AWS_REGION" | tee -a "$GITHUB_ENV"

      # Re-auth in the app's region (the bucket/distribution region you actually deploy to)
      - name: Configure AWS credentials (app region)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync immutable assets to S3
        run: |
          set -e
          aws s3 sync build/web "s3://$S3_BUCKET" \
            --exclude "index.html" \
            --cache-control "public,max-age=31536000,immutable" \
            --delete \
            --exact-timestamps

      - name: Fix MIME for WASM/JS (idempotent)
        run: |
          chmod +x scripts/fix-mime.sh
          S3_BUCKET="$S3_BUCKET" scripts/fix-mime.sh

      - name: Upload index.html (no-cache)
        run: |
          aws s3 cp build/web/index.html "s3://$S3_BUCKET/index.html" \
            --cache-control "no-cache"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CF_DISTRIBUTION_ID" \
            --paths "/*"
